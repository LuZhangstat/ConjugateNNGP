cat("  takes time: ", (proc.time() - t)[3])
cat("  total time: ", (proc.time() - t_inital)[3], "\n")
}
hist(conj.sigmasq)
hist(conj.beta[, 1])
hist(conj.beta[1, ])
hist(conj.beta[2, ])
hist(conj.beta[3, ])
rowMeans(conj.beta)
summary(lm(Y ~ X[, 2] + X[, 3])
)
-1.197e-03
-3.450e-03
rowMeans(conj.beta)
hist(conj.w[1,])
hist(conj.w[2,])
hist(conj.w[3,])
hist(conj.w[4,])
hist(conj.w[5,])
hist(conj.w[6,])
hist(conj.w[6,], breaks = 10)
hist(conj.w[6,], breaks = 20)
hist(conj.w[7,], breaks = 20)
1000*10
1000*10/3600
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu2")
load("./data/data/SST_data_als.RData")
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
rm(list = ls())
path = "/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu2/data/rawdata"                # Enter the data directory path
name = "A20171692017176.L3m_8D_SST_sst_4km.nc"                # Enter the filename of the source NetCDF data file
printFlag = TRUE                                      # Set to TRUE or FALSE if file content listing info is desired
nOutputElements = 10                                  # number of VarData array elements to output per data variable
nOutputRows = 20                                      # number of data rows output to screen before pause and user prompt
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu2/data/rawdata")
source('./funcReadNcdf.R')                          # compiles the function from its source code .r file
ReadNcdf(path, name, printFlag)                       # calls the function and passes user defined arguements
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu2")
load("./data/data/SST_data_als.RData")
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind, ]
SST_test <- SSTdata[test_ind, ]
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
library(rworldmap)
col.pal <- colorRampPalette(brewer.pal(11,'RdBu')[1:11])
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-140, -110), ylim = c(20, 60), asp = 1)
colors <- rev(col.pal(101))
zcolor <- colors[(SST_test$sst - min(SST_test$sst)) /
diff(range(SST_test$sst))*100 + 1]
points(SST_test$lon, SST_test$lat, col = zcolor, cex = .1)
colors <- rev(col.pal(101))
zcolor <- colors[(SSTdata$sst - min(SSTdata$sst)) /
diff(range(SSTdata$sst))*100 + 1]
points(SSTdata$lon, SSTdata$lat, col = zcolor, cex = .1)
library(rworldmap)
col.pal <- colorRampPalette(brewer.pal(11,'RdBu')[1:11])
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-140, -110), ylim = c(20, 60), asp = 1)
colors <- rev(col.pal(101))
zcolor <- colors[(SSTdata$sst - min(SSTdata$sst)) /
diff(range(SSTdata$sst))*100 + 1]
points(SSTdata$lon, SSTdata$lat, col = zcolor, cex = .1)
library(ggmap)
install.packages("ggmap")
136681/24
136681/3600
getwd()
load(./results/MMDM5/SST_lu2_MMDM5_500)
load("./results/MMDM5/SST_lu2_MMDM5_500")
library(shinystan)
launch_shinystan(samples)
stan_trace(samples)
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu3")
rm(list = ls())
load("./data/MMD_order/MMDM5/SSTlu3_MMD_M5.RData")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P, Y = Y, X = X, nearind = nearind,
neardist = neardist, neardistM = neardistM,
as = as, bs = bs, at = at, bt = bt, ap = ap, bp = bp)
lm.Y <- lm(Y~X[, "projX"] + X[, "projY"] )
lm.Y
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/simulation_paper/")
rm(list=ls())
library(rstan)
library(rstanarm)
load("stan_test_paper_flat/data_30_seed1234/sorted_coord_order2/nngp_10.Rdata")
load("stan_test_paper_flat/results_30_seed1234/sorted_coord_order2/model2_nngp_10_6000")
sum_m2_post_sim <- summary(samples_w)
sim_w_post <- extract(samples_w)
load("stan_test_paper_flat/results_30_seed1234/sorted_coord_order2/model2_full")
sum_m2_post_sim_f <- summary(samples_w_f)
sim_w_f_post <- extract(samples_w_f)
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
library(sp)
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/simulation_paper/")
rm(list=ls())
library(rstan)
library(rstanarm)
load("stan_test_paper_flat/data_30_seed1234/sorted_coord_order2/nngp_10.Rdata")
load("stan_test_paper_flat/results_30_seed1234/sorted_coord_order2/model2_nngp_10_6000")
sum_m2_post_sim <- summary(samples_w)
sim_w_post <- extract(samples_w)
load("stan_test_paper_flat/results_30_seed1234/sorted_coord_order2/model2_full")
sum_m2_post_sim_f <- summary(samples_w_f)
sim_w_f_post <- extract(samples_w_f)
myqnt <- c(0.5, 0.025, 0.975)
col.qnt <- function(X, start, niter, myqnt){
return (c(quantile(X[start:niter], myqnt)))
}
w_stan.qnt <-apply(sim_w_post$w - sim_w_post$beta[, 1], 2, col.qnt,
1, 3000, myqnt)
w_f_stan.qnt <-apply(sim_w_f_post$w - sim_w_f_post$beta[, 1], 2, col.qnt,
1, 3000, myqnt)
load("stan_test_paper_flat/samplew/results/sorted_coord_order2/simpostw_sort10.RData")
w_fast_stan.qnt <-apply(pos.w, 1, col.qnt,
1, 1000, myqnt)
load("stan_test_paper_flat/samplew/results/sorted_coord_order2/simpostw_sort10_point.RData")
w_p_fast_stan.qnt <-apply(pos.p.w, 1, col.qnt,
1, 1000, myqnt)
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
library(sp)
par(mfrow = c(1, 3))
par(mfrow = c(1, 3))
qqplot(sim_w_post$w[, 1] - sim_w_post$beta[, 1], pos.w[ 1, ]
#, main = "w[1]", xlab = "NNGP_Stan", ylab = "NNGP_fast"
)
abline(a = 0, b = 1)
?qqplot
qqplot(sim_w_post$w[, 1] - sim_w_post$beta[, 1], pos.w[ 1, ]
, main = "w[1]", xlab = "NNGP_Stan", ylab = "NNGP_fast"
)
qqplot(sim_w_post$w[, 1] - sim_w_post$beta[, 1], pos.w[ 1, ]
, xlab = "", ylab = "", main = "w[1]")
qqplot(sim_w_post$w[, 1] - sim_w_post$beta[, 1], pos.w[ 1, ]
, xlab = "", ylab = "", main = "")
abline(a = 0, b = 1)
qqplot(sim_w_post$w[, 1] - sim_w_post$beta[, 1], pos.w[ 1, ]
, xlab = "pseodu", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
width <- 10
height <- 10
pointsize <- 16
getwd()
width <- 5
height <- 5
pointsize <- 16
pdf(paste("stan_test_paper_flat/pic/qq_pseodu_RE_w1.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot(pos.w[ 1, ], sim_w_post$w[, 1] - sim_w_post$beta[, 1]
, xlab = "", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
dev.off()
width <- 5
height <- 5
pointsize <- 16
par(mfrow = c(1, 1))
pdf(paste("stan_test_paper_flat/pic/qq_pseodu_RE_w1.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot(pos.w[ 1, ], sim_w_post$w[, 1] - sim_w_post$beta[, 1]
, xlab = "", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
dev.off()
pdf(paste("stan_test_paper_flat/pic/qq_pseodu_RE_w2.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot( pos.w[ 2, ], sim_w_post$w[, 2] - sim_w_post$beta[, 1]
, xlab = "", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
dev.off()
width <- 5
height <- 5
pointsize <- 16
par(mfrow = c(1, 1))
pdf(paste("stan_test_paper_flat/pic/qq_pseodu_RE_w1.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot(pos.w[ 1, ], sim_w_post$w[, 1] - sim_w_post$beta[, 1]
, xlab = "", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
dev.off()
pdf(paste("stan_test_paper_flat/pic/qq_pseodu_RE_w2.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot( pos.w[ 2, ], sim_w_post$w[, 2] - sim_w_post$beta[, 1]
, xlab = "", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
dev.off()
pdf(paste("stan_test_paper_flat/pic/qq_pseodu_RE_w3.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot(sim_w_post$w[, 3] - sim_w_post$beta[, 1], pos.w[ 3, ]
, xlab = "", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
dev.off()
par(mfrow = c(1, 1))
pdf(paste("stan_test_paper_flat/pic/qq_conj_RE_w1.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot(pos.p.w[ 1, ], sim_w_post$w[, 1] - sim_w_post$beta[, 1]
, xlab = "conjugate", ylab = "NNGP random effect", main = "")
abline(a = 0, b = 1)
dev.off()
pdf(paste("stan_test_paper_flat/pic/qq_conj_RE_w2.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot(pos.p.w[ 2, ], sim_w_post$w[, 2] - sim_w_post$beta[, 1]
, xlab = "conjugate", ylab = "NNGP random effect", main = ""
)
abline(a = 0, b = 1)
dev.off()
pdf(paste("stan_test_paper_flat/pic/qq_conj_RE_w3.pdf", sep=""),
width=width, height=height, pointsize=pointsize, family="Courier")
qqplot(pos.p.w[ 3, ], sim_w_post$w[, 3] - sim_w_post$beta[, 1]
, xlab = "conjugate", ylab = "NNGP random effect", main = "" )
abline(a = 0, b = 1)
dev.off()
print(samples_w)
str(samples_w)
2914+2071
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/simulation_paper")
setwd("./stan_test_paper_flat/samplew")
source("./project/functions.R")
phi <- 25.498; deltasq <- 0.3765223/1.886
load("../data_30_seed1234/sorted_coord_order2/nngp_10.RData")
a = 1; b = 1;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(nearind))[which(c(t(nearind)) > 0)], 1:N)
MatrixX <- X
AD <- getADstan(neardist = neardist,  neardistM = neardistM,
nearind = nearind, N = N, M = M, phi = phi)
D <- AD[, M + 1]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up,
x = c(1 / sqrt(deltasq) * c(X),
rep(1 / sqrt(deltasq), N)))
X_star_star_down1 <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c( - c(t(AD[, 1:M]))[
which(!is.na(t(AD[, 1:M])))], rep(1, N)) )
X_star_star_down <- X_star_star_down1 / sqrt(D)
X_star_star <- rbind(X_star_star_up, X_star_star_down)
Y_star_star <- c(Y / sqrt(deltasq), rep(0, N))
X_Tstar_Y_star_star <- t(X_star_star) %*% Y_star_star
XTX_star_star <- t(X_star_star) %*% X_star_star
theta_hat <- cgsparse(XTX_star_star[1: (N + P), 1:(N + P)],
X_Tstar_Y_star_star[1:(N + P)])
b_star_star <- b + 0.5 * sum((Y_star_star- (X_star_star%*%theta_hat))^2)
a_star_star <- a + 0.5 * N
l<- 1000
pos.p.sigmasq <- c(0)
pos.p.beta <- matrix(NA, nrow = P, ncol = l)
pos.p.w <- matrix(NA, nrow = N, ncol = l)
l<- 3000
pos.p.sigmasq <- c(0)
pos.p.beta <- matrix(NA, nrow = P, ncol = l)
pos.p.w <- matrix(NA, nrow = N, ncol = l)
set.seed(1234)
t_inital <- proc.time()
for (i in 1: l){
cat(i, "th posterior sample:  ")
t <- proc.time()
## sample sigmasq from IG(a*, b*) ##
sigmasq <- 1 / rgamma(1, shape = a_star_star, rate = b_star_star)
cat("sigmasq is ", sigmasq)
#### sample theta given sigmasq, \hat{\theta} and X** ####
##i. sample u ~ N(0, sigmasq * I_{2n+p})$ ##
u <- rnorm(2 * N, 0) * sqrt(sigmasq)
##ii. get v = (X**T X**)^{-1} X**^Tu$ by conjugate gradient
X_star_u <- t(X_star_star) %*% u
v <- cgsparse(XTX_star_star[1: (N+P), 1:(N+P)], X_star_u[1:(N+P)])
##iii. get posterior sample theta = \hat{\theta} + v ##
sample_theta <- theta_hat + v
## save the posterior samples ##
pos.p.sigmasq[i] <- sigmasq
pos.p.beta[, i] <- sample_theta[1:P]
pos.p.w[, i] <- sample_theta[(P + 1): (N + P)]
cat("takes time: ", (proc.time() - t)[3])
cat("  total time: ", (proc.time() - t_inital)[3], "\n")
}
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/simulation_paper")
setwd("./stan_test_paper_flat/samplew")
source("./project/functions.R")
load("../results_30_seed1234/sorted_coord_order2/model1_nngp_10") #samples
samples_sort10 <- samples
extract_sort10 <- extract(samples_sort10,
pars = c("phi", "sigma", "tau", "beta"),
permuted = F)
post_sort10 <-c()
post_sort10$phi <- c(extract_sort10[, , "phi"])
post_sort10$sigma <- c(extract_sort10[, , "sigma"])
post_sort10$tau <- c(extract_sort10[, , "tau"])
post_sort10$beta1 <- c(extract_sort10[, , "beta[1]"])
post_sort10$beta2 <- c(extract_sort10[, , "beta[2]"])
load("../data_30_seed1234/sorted_coord_order2/nngp_10.RData")
post_phi <- post_sort10$phi
post_deltasq <- (post_sort10$tau/post_sort10$sigma)^2
a = 1; b = 1;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(nearind))[which(c(t(nearind)) > 0)], 1:N)
MatrixX <- X
l<- length(post_phi)            ## No. posterior samples
pos.sigmasq <- c(0)
pos.beta <- matrix(NA, nrow = P, ncol = l)
pos.w <- matrix(NA, nrow = N, ncol = l)
set.seed(1234)
t_inital <- proc.time()
for (i in 1: l){
cat(i, "th posterior sample:  ")
t <- proc.time()
## fix phi and deltasq
phi <- post_phi[i]; deltasq <- post_deltasq[i]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = neardist,  neardistM = neardistM,
nearind = nearind, N = N, M = M, phi = phi)
D <- AD[, M + 1]
## generate sparse matrix X** and Y**
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up,
x = c(1 / sqrt(deltasq) * c(X),
rep(1 / sqrt(deltasq), N)))
X_star_star_down1 <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c( - c(t(AD[, 1:M]))[
which(!is.na(t(AD[, 1:M])))], rep(1, N)) )
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star_star_down <- X_star_star_down1 / sqrt(D)
X_star_star <- rbind(X_star_star_up, X_star_star_down)
Y_star_star <- c(Y / sqrt(deltasq), rep(0, N))
## get theta = (X**^T X**)^-1 X**^T y** by conjugate gradient ##
X_Tstar_Y_star_star <- t(X_star_star) %*% Y_star_star
XTX_star_star <- t(X_star_star) %*% X_star_star
theta_hat <- cgsparse(XTX_star_star[1: (N + P), 1:(N + P)],
X_Tstar_Y_star_star[1:(N + P)])
## obtain a* and b* by equation for the posterior IG(a*, b*) for sigmasq ##
b_star_star <- b + 0.5 * sum((Y_star_star- (X_star_star%*%theta_hat))^2)
a_star_star <- a + 0.5 * N
## sample sigmasq from IG(a*, b*) ##
sigmasq <- 1 / rgamma(1, shape = a_star_star, rate = b_star_star)
cat("sigmasq is ", sigmasq)
#### sample theta given sigmasq, \hat{\theta} and X** ####
##i. sample u ~ N(0, sigmasq * I_{2n+p})$ ##
u <- rnorm(2 * N, 0) * sqrt(sigmasq)
##ii. get v = (X**T X**)^{-1} X**^Tu$ by conjugate gradient
X_star_u <- t(X_star_star) %*% u
v <- cgsparse(XTX_star_star[1: (N+P), 1:(N+P)], X_star_u[1:(N+P)])
##iii. get posterior sample theta = \hat{\theta} + v ##
sample_theta <- theta_hat + v
## save the posterior samples ##
pos.sigmasq[i] <- sigmasq
pos.beta[, i] <- sample_theta[1:P]
pos.w[, i] <- sample_theta[(P + 1): (N + P)]
cat("takes time: ", (proc.time() - t)[3])
cat("  total time: ", (proc.time() - t_inital)[3], "\n")
}
44.357*3
set.seed(1234)
t_inital <- proc.time()
for (i in 1: l){
cat(i, "th posterior sample:  ")
t <- proc.time()
## fix phi and deltasq
phi <- post_phi[i]; deltasq <- post_deltasq[i]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = neardist,  neardistM = neardistM,
nearind = nearind, N = N, M = M, phi = phi)
D <- AD[, M + 1]
## generate sparse matrix X** and Y**
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up,
x = c(1 / sqrt(deltasq) * c(X),
rep(1 / sqrt(deltasq), N)))
X_star_star_down1 <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c( - c(t(AD[, 1:M]))[
which(!is.na(t(AD[, 1:M])))], rep(1, N)) )
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star_star_down <- X_star_star_down1 / sqrt(D)
X_star_star <- rbind(X_star_star_up, X_star_star_down)
Y_star_star <- c(Y / sqrt(deltasq), rep(0, N))
## get theta = (X**^T X**)^-1 X**^T y** by conjugate gradient ##
X_Tstar_Y_star_star <- t(X_star_star) %*% Y_star_star
XTX_star_star <- t(X_star_star) %*% X_star_star
theta_hat <- cgsparse(XTX_star_star[1: (N + P), 1:(N + P)],
X_Tstar_Y_star_star[1:(N + P)])
## obtain a* and b* by equation for the posterior IG(a*, b*) for sigmasq ##
b_star_star <- b + 0.5 * sum((Y_star_star- (X_star_star%*%theta_hat))^2)
a_star_star <- a + 0.5 * N
## sample sigmasq from IG(a*, b*) ##
sigmasq <- 1 / rgamma(1, shape = a_star_star, rate = b_star_star)
cat("sigmasq is ", sigmasq)
#### sample theta given sigmasq, \hat{\theta} and X** ####
##i. sample u ~ N(0, sigmasq * I_{2n+p})$ ##
u <- rnorm(2 * N, 0) * sqrt(sigmasq)
##ii. get v = (X**T X**)^{-1} X**^Tu$ by conjugate gradient
X_star_u <- t(X_star_star) %*% u
v <- cgsparse(XTX_star_star[1: (N+P), 1:(N+P)], X_star_u[1:(N+P)])
##iii. get posterior sample theta = \hat{\theta} + v ##
sample_theta <- theta_hat + v
## save the posterior samples ##
pos.sigmasq[i] <- sigmasq
pos.beta[, i] <- sample_theta[1:P]
pos.w[, i] <- sample_theta[(P + 1): (N + P)]
cat("takes time: ", (proc.time() - t)[3])
cat("  total time: ", (proc.time() - t_inital)[3], "\n")
}
45*3
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/simulation_paper")
setwd("./stan_test_paper_flat/samplew")
source("./project/functions.R")
phi <- 25.498; deltasq <- 0.3765223/1.886
load("../data_30_seed1234/sorted_coord_order2/nngp_10.RData")
a = 1; b = 1;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(nearind))[which(c(t(nearind)) > 0)], 1:N)
MatrixX <- X
AD <- getADstan(neardist = neardist,  neardistM = neardistM,
nearind = nearind, N = N, M = M, phi = phi)
D <- AD[, M + 1]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up,
x = c(1 / sqrt(deltasq) * c(X),
rep(1 / sqrt(deltasq), N)))
X_star_star_down1 <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c( - c(t(AD[, 1:M]))[
which(!is.na(t(AD[, 1:M])))], rep(1, N)) )
X_star_star_down <- X_star_star_down1 / sqrt(D)
X_star_star <- rbind(X_star_star_up, X_star_star_down)
Y_star_star <- c(Y / sqrt(deltasq), rep(0, N))
X_Tstar_Y_star_star <- t(X_star_star) %*% Y_star_star
XTX_star_star <- t(X_star_star) %*% X_star_star
theta_hat <- cgsparse(XTX_star_star[1: (N + P), 1:(N + P)],
X_Tstar_Y_star_star[1:(N + P)])
b_star_star <- b + 0.5 * sum((Y_star_star- (X_star_star%*%theta_hat))^2)
a_star_star <- a + 0.5 * N
l<- 1000
pos.p.sigmasq <- c(0)
pos.p.beta <- matrix(NA, nrow = P, ncol = l)
pos.p.w <- matrix(NA, nrow = N, ncol = l)
set.seed(1234)
t_inital <- proc.time()
for (i in 1: l){
cat(i, "th posterior sample:  ")
t <- proc.time()
## sample sigmasq from IG(a*, b*) ##
sigmasq <- 1 / rgamma(1, shape = a_star_star, rate = b_star_star)
cat("sigmasq is ", sigmasq)
#### sample theta given sigmasq, \hat{\theta} and X** ####
##i. sample u ~ N(0, sigmasq * I_{2n+p})$ ##
u <- rnorm(2 * N, 0) * sqrt(sigmasq)
##ii. get v = (X**T X**)^{-1} X**^Tu$ by conjugate gradient
X_star_u <- t(X_star_star) %*% u
v <- cgsparse(XTX_star_star[1: (N+P), 1:(N+P)], X_star_u[1:(N+P)])
##iii. get posterior sample theta = \hat{\theta} + v ##
sample_theta <- theta_hat + v
## save the posterior samples ##
pos.p.sigmasq[i] <- sigmasq
pos.p.beta[, i] <- sample_theta[1:P]
pos.p.w[, i] <- sample_theta[(P + 1): (N + P)]
cat("takes time: ", (proc.time() - t)[3])
cat("  total time: ", (proc.time() - t_inital)[3], "\n")
}
