AD[i, j] = v2[j];
}
}
AD[1, (M+1)] = 1;
return AD;}
}
model {}
"
expose_stan_functions(stanc(model_code = model_code))
library(rstan)
stan_version()
citation()
citation("rstan")
citation()
citation("RcppEigen")
citation("gstat")
print(gstat,
bibtex=TRUE)
print(<Pebesma, E.J., 2004. Multivariable geostatistics in S: the gstat
package. Computers & Geosciences, 30: 683-691.
Benedikt Gräler, Edzer Pebesma and Gerard Heuvelink, 2016.
Spatio-Temporal Interpolation using gstat.  The R Journal 8(1),
204-218>,
bibtex=TRUE)
print(<Pebesma, E.J., 2004. Multivariable geostatistics in S: the gstat
package. Computers & Geosciences, 30: 683-691.
Benedikt Gräler, Edzer Pebesma and Gerard Heuvelink, 2016.
Spatio-Temporal Interpolation using gstat.  The R Journal 8(1),
204-218>,
bibtex=TRUE)
1/0.9257499
sqrt(1.51003603)
sqrt(0.04426536)
2* 0.210
2* 1.22883
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
load("./data/data/SST_data_als.RData")
SSTdata$lon2<- SSTdata$lon  # lon2 make -180 to be positive
SSTdata$lon2[which(SSTdata$lon < 0 )] <-
360 + SSTdata$lon[which(SSTdata$lon < 0)]
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon2, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind,]
SST_test <- SSTdata[test_ind,]
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(120, 250), ylim = c(10, 60), asp = 1)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(120, 180), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(120, 180), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
lat_ind <- which((varData$lat >= 10) & (varData$lat <= 60))
rm(list = ls())
path = "/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata"                # Enter the data directory path
name = "A20171692017176.L3m_8D_SST_sst_4km.nc"                # Enter the filename of the source NetCDF data file
printFlag = TRUE                                      # Set to TRUE or FALSE if file content listing info is desired
nOutputElements = 10                                  # number of VarData array elements to output per data variable
nOutputRows = 20                                      # number of data rows output to screen before pause and user prompt
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata")
source('./funcReadNcdf.R')                          # compiles the function from its source code .r file
ReadNcdf(path, name, printFlag)                       # calls the function and passes user defined arguements
lat_ind <- which((varData$lat >= 10) & (varData$lat <= 60))
lon_ind <- which(#(varData$lon >= 120 & varData$lon < 180) |
(varData$lon <= -110 & varData$lon > -181))
SST_pick <- varData$sst[lon_ind, lat_ind]
sst_pick_ind <- which(!is.na(SST_pick), arr.ind=TRUE)
SST_data <- SST_pick[sst_pick_ind]
lon_data <- varData$lon[lon_ind][sst_pick_ind[, 1]]
lat_data <- varData$lat[lat_ind][sst_pick_ind[, 2]]
qual_sst_data <- varData$qual_sst[lon_ind, lat_ind][sst_pick_ind]
SSTdata <- data.frame(sst = SST_data, lon = lon_data, lat = lat_data,
qual_sst = qual_sst_data)
save(SSTdata, file = "../data/SST_data_als.RData")
write.table(SSTdata, file = "./SSTdata.csv",row.names=FALSE, na="",
col.names=T, sep=",")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(20, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 45), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 50), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 55), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-170, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-160, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
lat_ind <- which((varData$lat >= 10) & (varData$lat <= 60))
lon_ind <- which(#(varData$lon >= 120 & varData$lon < 180) |
(varData$lon <= -110 & varData$lon > -170))
SST_pick <- varData$sst[lon_ind, lat_ind]
sst_pick_ind <- which(!is.na(SST_pick), arr.ind=TRUE)
SST_data <- SST_pick[sst_pick_ind]
lon_data <- varData$lon[lon_ind][sst_pick_ind[, 1]]
lat_data <- varData$lat[lat_ind][sst_pick_ind[, 2]]
qual_sst_data <- varData$qual_sst[lon_ind, lat_ind][sst_pick_ind]
SSTdata <- data.frame(sst = SST_data, lon = lon_data, lat = lat_data,
qual_sst = qual_sst_data)
save(SSTdata, file = "../data/SST_data_als.RData")
write.table(SSTdata, file = "./SSTdata.csv",row.names=FALSE, na="",
col.names=T, sep=",")
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
load("./data/data/SST_data_als.RData")
SSTdata$lon2<- SSTdata$lon  # lon2 make -180 to be positive
SSTdata$lon2[which(SSTdata$lon < 0 )] <-
360 + SSTdata$lon[which(SSTdata$lon < 0)]
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon2, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind,]
SST_test <- SSTdata[test_ind,]
save(SST_train, file = "./data/data/SST_train.RData")
save(SST_test, file = "./data/data/SST_test.RData")
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
par(mfrow= c(1, 1))
h <- 12
surf.raw <- mba.surf(SST_train[c("lon2", "lat", "sst")], no.X=300,
no.Y=300, exten=F, sp=TRUE, h=h)$xyz.est
surf.brks <- classIntervals(surf.raw$z, 50, 'pretty')$brks
col.pal <- colorRampPalette(brewer.pal(11,'RdBu')[1:11])
xlim <- range(SST_train$lon2)
zlim <- range(surf.raw[["z"]][which(!is.na(surf.raw[["z"]]))])
width <- 12
height <- 5
pointsize <- 16
i <- as.image.SpatialGridDataFrame(surf.raw)
plot(SSTdata[c("lon2", "lat")], typ="n", cex=0.5, xlim=xlim,
axes=FALSE, ylab="latitude", xlab="longitude",
main = "Original")
axis(2, las=1)
axis(1)
image.plot(i, add=TRUE, col=rev(col.pal(length(surf.brks)-1)), zlim=zlim,
border = "grey50", lwd = 3, legend.mar = 4)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-170, -110), ylim = c(10, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .6)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-170, -110), ylim = c(10, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
rm(list = ls())
path = "/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata"                # Enter the data directory path
name = "A20171692017176.L3m_8D_SST_sst_4km.nc"                # Enter the filename of the source NetCDF data file
printFlag = TRUE                                      # Set to TRUE or FALSE if file content listing info is desired
nOutputElements = 10                                  # number of VarData array elements to output per data variable
nOutputRows = 20                                      # number of data rows output to screen before pause and user prompt
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata")
source('./funcReadNcdf.R')                          # compiles the function from its source code .r file
ReadNcdf(path, name, printFlag)                       # calls the function and passes user defined arguements
if (printFlag == TRUE) {
for (cnt in 1:nVars){
cat(varAtts[[cnt]]$name,": ",varData[[cnt]][1:nOutputElements], "\n");
if (cnt > nOutputRows){
readline(prompt = "Paused. Press <Enter> to continue...")}
}
}
lat_ind <- which((varData$lat >= 10) & (varData$lat <= 60))
lat_ind <- which((varData$lat >= 20) & (varData$lat <= 60))
lon_ind <- which(#(varData$lon >= 120 & varData$lon < 180) |
(varData$lon <= -110 & varData$lon > -170))
SST_pick <- varData$sst[lon_ind, lat_ind]
sst_pick_ind <- which(!is.na(SST_pick), arr.ind=TRUE)
SST_data <- SST_pick[sst_pick_ind]
lon_data <- varData$lon[lon_ind][sst_pick_ind[, 1]]
lat_data <- varData$lat[lat_ind][sst_pick_ind[, 2]]
qual_sst_data <- varData$qual_sst[lon_ind, lat_ind][sst_pick_ind]
SSTdata <- data.frame(sst = SST_data, lon = lon_data, lat = lat_data,
qual_sst = qual_sst_data)
rm(list = ls())
path = "/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata"                # Enter the data directory path
name = "A20171692017176.L3m_8D_SST_sst_4km.nc"                # Enter the filename of the source NetCDF data file
printFlag = TRUE                                      # Set to TRUE or FALSE if file content listing info is desired
nOutputElements = 10                                  # number of VarData array elements to output per data variable
nOutputRows = 20                                      # number of data rows output to screen before pause and user prompt
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata")
source('./funcReadNcdf.R')                          # compiles the function from its source code .r file
ReadNcdf(path, name, printFlag)                       # calls the function and passes user defined arguements
if (printFlag == TRUE) {
for (cnt in 1:nVars){
cat(varAtts[[cnt]]$name,": ",varData[[cnt]][1:nOutputElements], "\n");
if (cnt > nOutputRows){
readline(prompt = "Paused. Press <Enter> to continue...")}
}
}
lat_ind <- which((varData$lat >= 20) & (varData$lat <= 60))
lon_ind <- which((varData$lon >= 120 & varData$lon < 180) |
(varData$lon <= -110 & varData$lon > -170))
SST_pick <- varData$sst[lon_ind, lat_ind]
sst_pick_ind <- which(!is.na(SST_pick), arr.ind=TRUE)
SST_data <- SST_pick[sst_pick_ind]
lon_data <- varData$lon[lon_ind][sst_pick_ind[, 1]]
lat_data <- varData$lat[lat_ind][sst_pick_ind[, 2]]
qual_sst_data <- varData$qual_sst[lon_ind, lat_ind][sst_pick_ind]
SSTdata <- data.frame(sst = SST_data, lon = lon_data, lat = lat_data,
qual_sst = qual_sst_data)
save(SSTdata, file = "../data/SST_data_als.RData")
write.table(SSTdata, file = "./SSTdata.csv",row.names=FALSE, na="",
col.names=T, sep=",")
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
load("./data/data/SST_data_als.RData")
SSTdata$lon2<- SSTdata$lon  # lon2 make -180 to be positive
SSTdata$lon2[which(SSTdata$lon < 0 )] <-
360 + SSTdata$lon[which(SSTdata$lon < 0)]
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon2, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind,]
SST_test <- SSTdata[test_ind,]
save(SST_train, file = "./data/data/SST_train.RData")
save(SST_test, file = "./data/data/SST_test.RData")
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
library(rworldmap)
newmap <- getMap(resolution = "low")
rm(list = ls())
path = "/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata"                # Enter the data directory path
name = "A20171692017176.L3m_8D_SST_sst_4km.nc"                # Enter the filename of the source NetCDF data file
printFlag = TRUE                                      # Set to TRUE or FALSE if file content listing info is desired
nOutputElements = 10                                  # number of VarData array elements to output per data variable
nOutputRows = 20                                      # number of data rows output to screen before pause and user prompt
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata")
source('./funcReadNcdf.R')                          # compiles the function from its source code .r file
ReadNcdf(path, name, printFlag)                       # calls the function and passes user defined arguements
if (printFlag == TRUE) {
for (cnt in 1:nVars){
cat(varAtts[[cnt]]$name,": ",varData[[cnt]][1:nOutputElements], "\n");
if (cnt > nOutputRows){
readline(prompt = "Paused. Press <Enter> to continue...")}
}
}
lat_ind <- which((varData$lat >= 20) & (varData$lat <= 60))
lon_ind <- which((varData$lon >= 120 & varData$lon < 180) |
(varData$lon <= -110 & varData$lon > -181))
SST_pick <- varData$sst[lon_ind, lat_ind]
sst_pick_ind <- which(!is.na(SST_pick), arr.ind=TRUE)
SST_data <- SST_pick[sst_pick_ind]
lon_data <- varData$lon[lon_ind][sst_pick_ind[, 1]]
lat_data <- varData$lat[lat_ind][sst_pick_ind[, 2]]
qual_sst_data <- varData$qual_sst[lon_ind, lat_ind][sst_pick_ind]
SSTdata <- data.frame(sst = SST_data, lon = lon_data, lat = lat_data,
qual_sst = qual_sst_data)
save(SSTdata, file = "../data/SST_data_als.RData")
write.table(SSTdata, file = "./SSTdata.csv",row.names=FALSE, na="",
col.names=T, sep=",")
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
load("./data/data/SST_data_als.RData")
SSTdata$lon2<- SSTdata$lon  # lon2 make -180 to be positive
SSTdata$lon2[which(SSTdata$lon < 0 )] <-
360 + SSTdata$lon[which(SSTdata$lon < 0)]
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon2, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind,]
SST_test <- SSTdata[test_ind,]
save(SST_train, file = "./data/data/SST_train.RData")
save(SST_test, file = "./data/data/SST_test.RData")
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
par(mfrow= c(1, 1))
h <- 12
surf.raw <- mba.surf(SST_train[c("lon2", "lat", "sst")], no.X=300,
no.Y=300, exten=F, sp=TRUE, h=h)$xyz.est
surf.brks <- classIntervals(surf.raw$z, 50, 'pretty')$brks
col.pal <- colorRampPalette(brewer.pal(11,'RdBu')[1:11])
xlim <- range(SST_train$lon2)
zlim <- range(surf.raw[["z"]][which(!is.na(surf.raw[["z"]]))])
width <- 12
height <- 5
pointsize <- 16
i <- as.image.SpatialGridDataFrame(surf.raw)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(120, 180), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(120, 180), ylim = c(10, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
plot(newmap, xlim = c(120, 180), ylim = c(10, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
plot(newmap, xlim = c(120, 180), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
plot(newmap, xlim = c(-180, -110), ylim = c(10, 60), asp = 1)
plot(newmap, xlim = c(120, 180), ylim = c(10, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
plot(newmap, xlim = c(120, 180), ylim = c(20, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(20, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
plot(newmap, xlim = c(120, -110), ylim = c(20, 60), asp = 1)
plot(newmap, xlim = c(-110, 120), ylim = c(20, 60), asp = 1)
plot(newmap, xlim = c(120, -110), ylim = c(20, 60), asp = 1)
plot(newmap, xlim = c(c(-110, -180), c(180, 120)), ylim = c(20, 60), asp = 1)
plot(newmap, xlim = c(-110, -180), ylim = c(20, 60), asp = 1)
plot(newmap, xlim = c(-180, -110), ylim = c(20, 60), asp = 1)
rm(list = ls())
path = "/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata"                # Enter the data directory path
name = "A20171692017176.L3m_8D_SST_sst_4km.nc"                # Enter the filename of the source NetCDF data file
printFlag = TRUE                                      # Set to TRUE or FALSE if file content listing info is desired
nOutputElements = 10                                  # number of VarData array elements to output per data variable
nOutputRows = 20                                      # number of data rows output to screen before pause and user prompt
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu/data/rawdata")
source('./funcReadNcdf.R')                          # compiles the function from its source code .r file
ReadNcdf(path, name, printFlag)                       # calls the function and passes user defined arguements
if (printFlag == TRUE) {
for (cnt in 1:nVars){
cat(varAtts[[cnt]]$name,": ",varData[[cnt]][1:nOutputElements], "\n");
if (cnt > nOutputRows){
readline(prompt = "Paused. Press <Enter> to continue...")}
}
}
lat_ind <- which((varData$lat >= 20) & (varData$lat <= 60))
lon_ind <- which(#(varData$lon >= 120 & varData$lon < 180) |
(varData$lon <= -110 & varData$lon > -181))
SST_pick <- varData$sst[lon_ind, lat_ind]
sst_pick_ind <- which(!is.na(SST_pick), arr.ind=TRUE)
SST_data <- SST_pick[sst_pick_ind]
lon_data <- varData$lon[lon_ind][sst_pick_ind[, 1]]
lat_data <- varData$lat[lat_ind][sst_pick_ind[, 2]]
qual_sst_data <- varData$qual_sst[lon_ind, lat_ind][sst_pick_ind]
SSTdata <- data.frame(sst = SST_data, lon = lon_data, lat = lat_data,
qual_sst = qual_sst_data)
save(SSTdata, file = "../data/SST_data_als.RData")
write.table(SSTdata, file = "./SSTdata.csv",row.names=FALSE, na="",
col.names=T, sep=",")
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
load("./data/data/SST_data_als.RData")
SSTdata$lon2<- SSTdata$lon  # lon2 make -180 to be positive
SSTdata$lon2[which(SSTdata$lon < 0 )] <-
360 + SSTdata$lon[which(SSTdata$lon < 0)]
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon2, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind,]
SST_test <- SSTdata[test_ind,]
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
load("./data/data/SST_data_als.RData")
SSTdata$lon2<- SSTdata$lon  #
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind,]
SST_test <- SSTdata[test_ind,]
save(SST_train, file = "./data/data/SST_train.RData")
save(SST_test, file = "./data/data/SST_test.RData")
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
par(mfrow= c(1, 1))
h <- 12
surf.raw <- mba.surf(SST_train[c("lon", "lat", "sst")], no.X=300,
no.Y=300, exten=F, sp=TRUE, h=h)$xyz.est
surf.brks <- classIntervals(surf.raw$z, 50, 'pretty')$brks
col.pal <- colorRampPalette(brewer.pal(11,'RdBu')[1:11])
xlim <- range(SST_train$lon2)
xlim <- range(SST_train$lon)
zlim <- range(surf.raw[["z"]][which(!is.na(surf.raw[["z"]]))])
rm(list = ls())
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
load("./data/data/SST_data_als.RData")
library(mapproj)
knots.sinusoidal <- mapproject(SSTdata$lon, SSTdata$lat,
projection="sinusoidal")
radius.of.earth = 6371      ## kilometers or 3963.17 miles
knots.sinusoidal = radius.of.earth * (
cbind(knots.sinusoidal$x, knots.sinusoidal$y))
SSTdata$projX <- knots.sinusoidal[, 1]
SSTdata$projY <- knots.sinusoidal[, 2]
dim(SSTdata)
hist(SSTdata$sst)
set.seed(1)
test_ind <- sample.int(dim(SSTdata)[1], floor(0.1*length(SSTdata$sst)))
SST_train <- SSTdata[-test_ind,]
SST_test <- SSTdata[test_ind,]
save(SST_train, file = "./data/data/SST_train.RData")
save(SST_test, file = "./data/data/SST_test.RData")
library(coda)
library(spBayes)
library(MBA)
library(fields)
library(classInt)
library(RColorBrewer)
par(mfrow= c(1, 1))
h <- 12
surf.raw <- mba.surf(SST_train[c("lon", "lat", "sst")], no.X=300,
no.Y=300, exten=F, sp=TRUE, h=h)$xyz.est
surf.brks <- classIntervals(surf.raw$z, 50, 'pretty')$brks
col.pal <- colorRampPalette(brewer.pal(11,'RdBu')[1:11])
xlim <- range(SST_train$lon)
zlim <- range(surf.raw[["z"]][which(!is.na(surf.raw[["z"]]))])
width <- 12
height <- 5
pointsize <- 16
i <- as.image.SpatialGridDataFrame(surf.raw)
plot(SSTdata[c("lon2", "lat")], typ="n", cex=0.5, xlim=xlim,
axes=FALSE, ylab="latitude", xlab="longitude",
main = "Original")
axis(2, las=1)
plot(SSTdata[c("lon", "lat")], typ="n", cex=0.5, xlim=xlim,
axes=FALSE, ylab="latitude", xlab="longitude",
main = "Original")
axis(2, las=1)
axis(1)
image.plot(i, add=TRUE, col=rev(col.pal(length(surf.brks)-1)), zlim=zlim,
border = "grey50", lwd = 3, legend.mar = 4)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-180, -110), ylim = c(20, 60), asp = 1)
points(SST_test$lon, SST_test$lat, col = "red", cex = .1)
plot(newmap, xlim = c(-180, -110), ylim = c(20, 60), asp = 1)
setwd("/Users/luzhang/Documents/Biostats/research/bitbucket/realdata_paper/SST_lu")
setwd("./data")
rm(list = ls())
load("./rawdata/SST_train.RData")
load("./data/SST_train.RData")
source("./function/locationfuns.R")
source("./function/NNMatrix.R")
source("./function/orderfuns.R")
loc <- SST_train[c("projX", "projY")]
set.seed(1)
t <- proc.time()
MMD_order <- orderMaxMinFast(loc, 20)
proc.time() - t
662*40
26480/3600
